// ********RoostGPT********
/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4-1106-preview

Test generated for /pet_put for http method type PUT in rest-assured framework

RoostTestHash=11a6f019a9


*/

// ********RoostGPT********
package org.web3j.sample.RoostTest;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONException;
import org.json.JSONArray;
import java.util.Arrays;

public class petPutTest {

    List<Map<String, String>> envList = new ArrayList<>();


    @BeforeEach
    public void setUp() {
      TestdataLoader dataloader = new TestdataLoader();
      String[] envVarsList = {""};
      envList = dataloader.load("src/test/java/org/web3j/sample/RoostTest/petPutTest.csv", envVarsList);
    }

  
    @Test  
    public void petPut_Test() throws JSONException {
        this.setUp();
        Integer testNumber = 1;
        for (Map<String, String> testData : envList) {
          RestAssured.baseURI = (testData.get("BASE_URL") != null && !testData.get("BASE_URL").isEmpty()) ? testData.get("BASE_URL"): "https://petstore3.swagger.io/api/v3";  
  
                Response responseObj = given()
				.contentType(ContentType.JSON)
				.body("{\n"+
					"  \"id\": \"" + (testData.get("id") != null ? testData.get("id") : "") + "\",\n" +
					"  \"name\": \"" + (testData.get("name") != null ? testData.get("name") : "") + "\",\n" +
					"  \"category\": \"" + (testData.get("category") != null ? testData.get("category") : "") + "\",\n" +
					"  \"photoUrls\": \"" + (testData.get("photoUrls") != null ? testData.get("photoUrls") : "") + "\",\n" +
					"  \"tags\": \"" + (testData.get("tags") != null ? testData.get("tags") : "") + "\",\n" +
					"  \"status\": \"" + (testData.get("status") != null ? testData.get("status") : "") + "\n" +
 				"}")
                .when()
                .put("/pet")  
                .then() 
                .extract().response(); 
              JsonPath response;
              String contentType = responseObj.getContentType();

              System.out.printf("Test Case %d: petPut_Test \n", testNumber++);
              System.out.println("Request: PUT /pet");
              System.out.println("Status Code: " + responseObj.statusCode());
              if (testData.get("statusCode") != null) {
                MatcherAssert.assertThat(responseObj.statusCode(),
                    equalTo(Integer.parseInt(testData.get("statusCode"))));
              }
             else{
                 List<Integer> expectedStatusCodes = Arrays.asList(200,400,404,405);
              MatcherAssert.assertThat(responseObj.statusCode(), is(in(expectedStatusCodes)));
                 }
              
        switch(responseObj.statusCode()){
        
          case 200:
         
           MatcherAssert.assertThat(contentType, equalTo("application/json"));
           break;
        
    }
      
              if (contentType.contains("application/xml") || contentType.contains("text/xml")) {
                String xmlResponse = responseObj.asString();
                JSONObject jsonResponse = XML.toJSONObject(xmlResponse);
                JSONObject jsonData = jsonResponse.getJSONObject("xml");
                String jsonString = jsonData.toString();
                response = new JsonPath(jsonString);
        
              } else if(contentType.contains("application/json")){  
                response = responseObj.jsonPath(); 
              } else {
                System.out.println("Response content type found: "+contentType+", but RoostGPT currently only supports the following response content types: application/json,text/xml,application/xml");
                continue;
              }
         
                if (responseObj.statusCode() == 200) {
					System.out.println("Description: Successful operation");
      
              if (response.get("id") != null) {  
                MatcherAssert.assertThat(response.get("id"), instanceOf(Integer.class));  
          }
      
              if (response.get("name") != null) {  
                MatcherAssert.assertThat(response.get("name"), instanceOf(String.class));  
          }
      
              if (response.get("category") != null) {      
              if (response.get("category.id") != null) {  
                MatcherAssert.assertThat(response.get("category.id"), instanceOf(Integer.class));  
          }
      
              if (response.get("category.name") != null) {  
                MatcherAssert.assertThat(response.get("category.name"), instanceOf(String.class));  
          }
  
          }
      
              if (response.get("photoUrls") != null) {      
                for (int i = 0; i < response.getList("photoUrls").size(); i++) {      
                  }    
                MatcherAssert.assertThat(response.getList("photoUrls"), instanceOf(List.class));
  
          }
      
              if (response.get("tags") != null) {        
                  for (int i = 0; i < response.getList("tags").size(); i++) {      
              if (response.get("tags["+ i +"].id") != null) {  
                MatcherAssert.assertThat(response.get("tags["+ i +"].id"), instanceOf(Integer.class));  
          }
      
              if (response.get("tags["+ i +"].name") != null) {  
                MatcherAssert.assertThat(response.get("tags["+ i +"].name"), instanceOf(String.class));  
          }
        
                    }    
                MatcherAssert.assertThat(response.getList("tags"), instanceOf(List.class));
  
          }
      
              if (response.get("status") != null) {  
                MatcherAssert.assertThat(response.get("status"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.getString("status"), anyOf(equalTo("available"), equalTo("pending"), equalTo("sold")));
  
          }
				}
if (responseObj.statusCode() == 400) {
					System.out.println("Description: Invalid ID supplied");
				}
if (responseObj.statusCode() == 404) {
					System.out.println("Description: Pet not found");
				}
if (responseObj.statusCode() == 405) {
					System.out.println("Description: Validation exception");
				}


            }  
    }
}
